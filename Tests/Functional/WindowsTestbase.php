<?php

/***************************************************************
 *  Copyright notice
 *
 *  (c) 2021 Sjoerd Zonneveld  <code@bitpatroon.nl>
 *  Date: 22-1-2021 10:20
 *
 *  All rights reserved
 *
 *  This script is part of the TYPO3 project. The TYPO3 project is
 *  free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published by
 *  the Free Software Foundation; either version 3 of the License, or
 *  (at your option) any later version.
 *
 *  The GNU General Public License can be found at
 *  http://www.gnu.org/copyleft/gpl.html.
 *
 *  This script is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  This copyright notice MUST APPEAR in all copies of the script!
 ***************************************************************/

namespace BPN\BpnExpiringFeUsers\Tests\Functional;

use Psr\Container\ContainerInterface;
use TYPO3\CMS\Core\Core\Bootstrap;
use TYPO3\CMS\Core\Core\SystemEnvironmentBuilder;
use TYPO3\CMS\Core\Utility\GeneralUtility;
use TYPO3\TestingFramework\Core\Testbase;

class WindowsTestbase extends Testbase
{
    protected function getSymlinks(string $instancePath)
    {
        $ORIGINAL_WEB = $_ENV['TYPO3_PATH_WEB'];

        return [
            'link' => [
                $ORIGINAL_WEB . '\\typo3' => $instancePath . '\\typo3',
                $ORIGINAL_WEB . '\\vendor' => $instancePath . '\\vendor',
            ],
            'copy' => [$ORIGINAL_WEB . '\\index.php' => $instancePath . '\\index.php',]
        ];
    }

    public function setUpInstanceCoreLinks($instancePath): void
    {
        $this->createDirectory($instancePath . '/typo3_src');

        $links = $this->getSymlinks($instancePath);
        foreach ($links['link'] as $from => $to) {
            if (!$this->createWindowsSymLink($from, $to)) {
                throw new \Exception('Creating link failed: from ' . $from . ' to: ' . $to, 1611750883);
            }
        }

        foreach ($links['copy'] as $from => $to) {
            if (!$this->createWindowsSymLink($from, $to, true)) {
                throw new \Exception('Creating copy failed: from ' . $from . ' to: ' . $to, 1611750878);
            }
        }
    }

    protected function createWindowsSymLink(string $from, string $to, bool $copy = false)
    {
        $isDir = is_dir($from);
        if ($copy) {
            copy($from, $to);
        } else {
            $parameter = sprintf("%s", is_dir($from)) ? ' /J ' : '';
            $this->shellExecute(
                'mklink ' . $parameter . ' ' . escapeshellarg($to) . ' ' . escapeshellarg($from),
                true,
                1
            );
            if (is_link($to)) {
                return true;
            }
        }

        return $isDir ? is_dir($to) : is_file($to);
    }

    protected function shellExecute($cmd, bool $background, int $postDelay = 0)
    {
        if (0 === strpos(php_uname(), 'Windows')) {
            $cmd = 'start ' . ($background ? '/B ' : '') . $cmd;
            // code is responsible for outputting :"The process tried to write to a nonexistent pipe."
            try{
                $pipe = popen($cmd, 'rb');
            } finally {
                if($pipe){
                    pclose($pipe);
                }
            }

        } else {
            if ($background ? '/B' : '') {
                $cmd .= ' > /dev/null &';
            }
            exec($cmd);
        }
        if ($postDelay > 0) {
            sleep($postDelay);
        }
    }

    public function removeOldInstanceIfExists($instancePath): void
    {
        // ensure to first remove all "Symlinks" first. Not recursive, because then all subfolders will disappear too!

        $links = $this->getSymlinks($instancePath);

        foreach ($links as $type => $linkSet) {
            foreach ($linkSet as $from => $to) {
                if (is_link($to) || is_file($to)) {
                    unlink($to);
                } elseif (is_dir($to)) {
                    $this->shellExecute('rmdir ' . escapeshellarg($to), true);
                }
            }
        }

        parent::removeOldInstanceIfExists($instancePath); // TODO: Change the autogenerated stub
    }

    /**
     * Bootstrap basic TYPO3. This bootstraps TYPO3 far enough to initialize database afterwards.
     * For functional and acceptance tests.
     *
     * @param string $instancePath Absolute path to test instance
     *
     * @return ContainerInterface
     */
    public function setUpBasicTypo3Bootstrap($instancePath) : ContainerInterface
    {
        $_SERVER['PWD'] = $instancePath;
        $_SERVER['argv'][0] = 'index.php';

        // Reset state from a possible previous run
        GeneralUtility::purgeInstances();

        $classLoader = require PROJECT_ROOT . 'vendor/autoload.php';
        SystemEnvironmentBuilder::run(
            0,
            SystemEnvironmentBuilder::REQUESTTYPE_BE | SystemEnvironmentBuilder::REQUESTTYPE_CLI
        );
        $container = Bootstrap::init($classLoader);
        // Make sure output is not buffered, so command-line output can take place and
        // phpunit does not whine about changed output bufferings in tests.
        ob_end_clean();

        $this->dumpClassLoadingInformation();

        return $container;
    }

}
